#!/usr/bin/env python3

"""
Apply cross-validation to evaluate classifier.
"""

from argparse import ArgumentParser

from sportsbet.soccer import BettingAgent
from sportsbet.config import CLASSIFIERS


def parse_args():
    """Parse command line arguments."""
    
    # Create parser
    parser = ArgumentParser('Apply cross-validation to evaluate a classifier.')
    
    # Add arguments
    parser.add_argument('--clf-name', default='trivial', help='The classifier name to predict the results.')
    parser.add_argument('--predicted-result', default='A', help='Predicted result (H or A or D).')
    parser.add_argument('--n-splits', default=5, type=int, help='The number of cross-validation splits.')
    parser.add_argument('--random-state', default=0, type=int, help='The random state for cross-validation splitting and classifiers.')
      
    return parser.parse_args()


def evaluate_classifier(clf_name, predicted_result, n_splits, random_state):

    # Define classifier and fitting parameters
    classifier, fit_params = CLASSIFIERS[clf_name]

    # Create betting agent
    betting_agent = BettingAgent()

    # Get results
    total_profit, mean_profit = betting_agent.evaluate_classifier(classifier, fit_params, predicted_result, n_splits, random_state)
        
    return total_profit, mean_profit


if __name__ == '__main__':
    
    # Parse arguments
    args = vars(parse_args())
    
    # Backtesting
    total_profit, mean_profit = evaluate_classifier(**args)
    
    # Print results
    print(u'Total profit: {:.1f} \xb1 {:.1f}'.format(*total_profit))
    print(u'Mean profit: {:.3f} \xb1 {:.3f}'.format(*mean_profit))
