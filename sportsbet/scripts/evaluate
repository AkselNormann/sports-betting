#!/usr/bin/env python3

"""
Evaluate a classifier using either cross-validation or backtesting.
"""

from os import linesep
from argparse import ArgumentParser

import pandas as pd
from sklearn.utils import check_random_state
from sportsbet.utils import set_random_state
from sportsbet.soccer import BettingAgent
from sportsbet.soccer.optimization import DEFAULT_CLASSIFIERS
from sportsbet.config import CLASSIFIERS
from tqdm import trange


def parse_args():
    """Parse command line arguments."""
    
    # Create parser
    parser = ArgumentParser('Evaluate a classifier using either cross-validation or backtesting.')
    
    # Add arguments
    parser.add_argument('clf-name', help='The classifier name to predict the results.')
    parser.add_argument('predicted-result', help='Predicted result.')
    parser.add_argument('--eval-type', default='cross-validation', help='Type of evaluation.')
    parser.add_argument('--n-runs', default=5, type=int, help='Number of backtesting repetitions.')
    parser.add_argument('--n-splits', default=5, type=int, help='The number of cross-validation splits.')
    parser.add_argument('--random-state', default=0, type=int, help='The random state for cross-validation splitting and classifiers.')
    parser.add_argument('--test-year', default=2, type=int, help='Test year.')
    parser.add_argument('--max-day-range', default=1, type=int, help='Maximum day range between bets.')
    parser.add_argument('--bet-factor', default=2, type=float, help='Factor to multiple betting amount in the case of loss.')  
    parser.add_argument('--credit-exponent', default=3, type=int, help='Exponent to raise bet factor in order to get the available credit.')
    parser.add_argument('--odds-type', default='maximum', help='Type of odds to use for evaluation.')
      
    return parser.parse_args()


def backtest(clf_name, predicted_result, n_runs, test_year, max_day_range, odds_type, random_state):

    # Define classifier and fitting parameters
    classifier, fit_params = CLASSIFIERS[clf_name]

    # Define random states
    random_state = check_random_state(random_state)
    random_states = [random_state.randint(0, 2 ** 32 - 1, dtype='uint32') for _ in range(n_runs)]

    # Backtesting
    betting_agents = []
    for run in trange(n_runs, desc='Runs: '):

        # Set random state
        set_random_state(classifier, random_states[run])

        # Create betting agent
        betting_agent = BettingAgent()

        # Backtest agent
        betting_agent.backtest(classifier, fit_params, predicted_result, test_year, max_day_range, odds_type)

        # Append agent
        betting_agents.append(betting_agent)
        
    return betting_agents


def cross_validate(clf_name, predicted_result, n_splits, odds_type, random_state):

    # Define classifier and fitting parameters
    classifier, fit_params = CLASSIFIERS[clf_name]

    # Create betting agent
    betting_agent = BettingAgent()

    # Get results
    mean_profit = betting_agent.cross_validate(classifier, fit_params, predicted_result, n_splits, odds_type, random_state)
        
    return mean_profit


def print_cross_validation_results(mean_profit):
    """"Print the cross-validation results."""

    print(u'Average profit per bet: {:.3f} \xb1 {:.3f}'.format(*mean_profit))


def print_backtesting_results(betting_agents):
    """Print the backtestings results."""

    # Parse results
    results = []
    for betting_agent in betting_agents:
        statistics, mean_precision, profit_per_bet = betting_agent.calculate_backtest_results(args['bet_factor'], args['credit_exponent'])
        results.append((statistics['Capital'].values[-1], mean_precision, profit_per_bet))
    results = pd.DataFrame(results, columns=['Capital', 'Precision', 'Profit per bet'])
    
    # Define basic print messages
    msgs = (u'Average capital: {:.1f}', u'Average precision: {:.1f}% ', u'Average profit per bet: {:.1f}% ')

    # Aggregate results
    aggregated_results = zip(results.mean().values, results.std().values, msgs)
    
    # Iterate results
    two_lines = 2 * linesep
    for ind, (avg_val, std_val, msg) in enumerate(aggregated_results):
        if len(results) == 1:
            if ind == 0:
                print(linesep, statistics, end=two_lines)
            else:
                avg_val *= 100
            std_val = ''
        else:
            if ind == 0:
                msg = linesep + msg + ' \xb1 {:.1f}'
            else:
                avg_val *= 100
                std_val *= 100
                msg += ' \xb1 {:.1f}%'
        
        # Print result
        print(msg.format(avg_val, std_val))


if __name__ == '__main__':
    
    # Parse arguments
    args = vars(parse_args())

    # Evaluation
    if args['eval_type'] == 'cross-validation':
        mean_profit = cross_validate(args['clf-name'], args['predicted-result'], args['n_splits'], args['odds_type'], args['random_state'])
        print_cross_validation_results(mean_profit)
        
    elif args['eval_type'] == 'backtesting':
        betting_agents = backtest(args['clf-name'], args['predicted-result'], args['n_runs'], args['test_year'], args['max_day_range'], args['odds_type'], args['random_state'])
        print_backtesting_results(betting_agents)
